K =

   -0.2160   -0.1269   -8.5630   -1.6085

with these conditions:
%% system params
mp = 0.793;       % mass of the pendulum (point mass in this model)
mw_l = 0.243;     % mass of left wheel + motor
mw_r = 0.243;     % mass of right wheel + motor
mw = mw_l + mw_r; % total mass of wheels + motors
l = 0.18;             % length of pendulum (estimation, subject to change)
r = 0.045;        % radius of wheel
g = 9.81;         % gravity accel

%% State Matrices (already linearized around IP balancing in place (0))
% system matrix (dynamics)
A = [0     1                0              0;
     0     0    (-1*mp*g)/(r*(mp+4*mw))    0;
     0     0                0              1;
     0     0   (g*(mp+2*mw))/(l*(mp+4*mw)) 0];

% control/input matrix
B = [       0;
     2/(r^2*(mp+4*mw));
            0;
    -1/(l*r*(mp+4*mw))];

% output matrix (we're interested in the whole state vector as we can
% measure it all)
C = [1 0 0 0;
     0 1 0 0;
     0 0 0 0;
     0 0 0 0];

% feedforward matrix (assuming no measurement noise & that our outputs do
% not directly depend on our inputs)
D = [0;
     0;
     0;
     0];

% state vector
% x = [phi;
%      phi_d
%      theta;
%      theta_d];

% initial state vector
x0 = [pi/6;  % phi      (this will vary depending on how I place the IP)
      0;  % phi_d    (assuming no prior external force on system)
      0;  % theta    (assuming wheel is already at 0 pos)
      0]; % theta_d  (assuming wheel is not moving)

states = {'phi' 'phi_d' 'theta' 'theta_d'}; %(d = derivative)
inputs = {'u'}; % control input (wheel motor torque)
outputs = {'phi' 'phi_d' 'theta' 'theta_d'};
n = size(states);
n = n(2:2);

%% LQR
%  calculate optimal K gain for optimal pole placement balancing Q, R
%  penalty gains
% state penalty (state vector difference to desired) aka error penalty
Q = [70  0  0   0;   % phi penalty
     0   1  0   0;   % phi dot penalty
     0   0  10  0;   % theta penalty
     0   0  0   10]; % theta dot penalty
% (control/energy penalty)
R = 1500;

% K = state feedback gains
% S = solution to Riccati equation
% e = eigenvalues of the closed loop system
[K,S,e] = lqr(A,B,Q,R);
